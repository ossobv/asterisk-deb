#!/bin/bash
cd "$(dirname "$0")"  # jump to curdir

# Pass these on the command line.
oscodename=${1:-debian/buster}  # debian/buster

buildversion=$(sed -e '1!d;s/.*(//;s/).*//' debian/changelog)
upname=asterisk
upversion=$(echo "$buildversion" | sed -e 's/-.*//;s/^[0-9]*://')     # 16.17
debepoch=$(echo "$buildversion" | sed -e '/^[0-9]*:/!d;s/:.*/:/')     # 1:
debversion=$(echo "$buildversion" | sed -e 's/[^-]*-//;s/+[^+]*$//')  # 0osso0

echo "Usage: $0 [$oscodename]"
echo "(version is taken from changelog directly)"
echo
echo ".. continuing to build: $upname $upversion ($debversion) for $oscodename"
echo

osdistro=${oscodename%/*}   # debian (or ubuntu)
oscodename=${oscodename#*/} # stretch (or bionic)
osdistshort=${osdistro:0:3} # deb (or ubu)
case $osdistro/$oscodename in
debian/bullseye) oscodenum=11;;
debian/buster)   oscodenum=10;;
debian/stretch)  oscodenum=9;;
debian/jessie)   oscodenum=8;;
debian/wheezy)   oscodenum=7;;
ubuntu/jammy)    oscodenum=22.04;;
ubuntu/focal)    oscodenum=20.04;;
ubuntu/bionic)   oscodenum=18.04;;
ubuntu/xenial)   oscodenum=16.04;;
ubuntu/trusty)   oscodenum=14.04;;
*) echo "ERROR: undefined OS: $osdistro/$oscodename" >&2 && exit 1
esac
_shortver=$osdistshort$oscodenum

# Update changelog
sed -i -e "1s/+\\(deb\\|ubu\\)[0-9.]*) [a-z]\\+;/+$_shortver) $oscodename;/" \
    debian/changelog

# Docker disallows certain tokens in versions.
dockversion=$(echo build-${upname}-${upversion}-${debversion}-${oscodename} |
    sed -e 's/[^0-9A-Za-z_.-]/_/g')

# Get cachable Asterisk version.
mkdir -p .cache
if ! test -s .cache/asterisk_${upversion}.orig.tar.gz &&
        which curl >/dev/null; then
    url=https://downloads.asterisk.org/pub/telephony/asterisk/
    curl --fail "${url}/asterisk-${upversion}.tar.gz" \
      >.cache/asterisk_${upversion}.orig.tar.gz || \
    curl --fail "${url}/old-releases/asterisk-${upversion}.tar.gz" \
      >.cache/asterisk_${upversion}.orig.tar.gz || exit 1
fi

# Will build files.
docker build \
    --pull \
    --ulimit nofile=512 \
    --build-arg osdistro=$osdistro \
    --build-arg osdistshort=$osdistshort \
    --build-arg oscodename=$oscodename \
    --build-arg upname=$upname \
    --build-arg upversion=$upversion \
    --build-arg debepoch=$debepoch \
    --build-arg debversion=$debversion \
    -t $dockversion \
    -f Dockerfile \
    .
ret=$?
if test $ret -ne 0; then
    echo "fail ($ret)" >&2
    exit $ret
fi

# Copy files to ./Dockerfile.out
test -d Dockerfile.out/$oscodename || mkdir -p Dockerfile.out/$oscodename
docker run $dockversion sh -c 'cd /dist; tar -zc *' |
    tar -zxvC Dockerfile.out/$oscodename/ |
    sed -e 's#$# -> Dockerfile.out/'$oscodename'/#'
