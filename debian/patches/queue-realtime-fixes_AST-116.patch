From: Walter Doekes <wjdoekes+asterisk@osso.nl>
Subject: realtime app_queue fixes
Bug: GN/AST-116
Date: 2019-12-11
Upstream: no (not yet? not needed?)

Should fix a couple of problems with the Asterisk realtime queue in 11.

Prerequisites:
  * We require the change that the devstate of realtime chan_sip is
    UNKNOWN instead of UNAVAILABLE:

         * Thus, we call for realtime=FALSE and devstate_only=TRUE.
         * Except when rtstatic=yes.  In that case we will skip the
         * realtime lookup altogether because even if we do find it
         * in the DB, we'll know two things: (a) that we didn't have
         * it in memory already (0 calls) and (b) that it exists
        ...
        /* if this is a (uncached) realtime peer, we don't
         * necessarily have an address */
        res = AST_DEVICE_UNKNOWN;

Changes:
  * Adding AST_DEVICE_UNKNOWN to certain places where AST_DEVICE_NOT_INUSE is
    checked. Ideally we wanted chan_sip to return AST_DEVICE_NOT_INUSE where we
    now have it return AST_DEVICE_UNKNOWN, but we wouldn't get that to work.
    (Unsure why. This could use a second glance.)

Realtime queue views:
  * The queue views might now looks like this:

         -- asterisk_queues
         select account_queue.id AS name,
           account_queue.musicclass AS musicclass,
           account_queue.maxlen AS maxlen,
        +  'no' AS ringinuse,
           account_queue.strategy AS strategy,
           account_queue.timeout AS timeout,
           account_queue.timeoutrestart AS timeoutrestart,
           account_queue.retry AS retry,
           account_queue.wrapuptime AS wrapuptime,
           account_queue.announce AS announce,
           account_queue.reportholdtime AS reportholdtime,
           account_queue.announce_frequency AS `announce-frequency`,
           account_queue.announce_holdtime AS `announce-holdtime`,
           account_queue.queue_youarenext AS `queue-youarenext`,
           account_queue.queue_thereare AS `queue-thereare`,
           account_queue.queue_callswaiting AS `queue-callswaiting`,
           account_queue.queue_holdtime AS `queue-holdtime`,
           account_queue.queue_minutes AS `queue-minutes`,
           account_queue.queue_seconds AS `queue-seconds`,
           account_queue.queue_thankyou AS `queue-thankyou`,
           account_queue.queue_lessthan AS `queue-lessthan`,
           account_queue.queue_reporthold AS `queue-reporthold`,
           account_queue.periodic_announce AS `periodic-announce`,
           account_queue.periodic_announce_frequency AS `periodic-announce-frequency`,
           account_queue.joinempty AS joinempty,
           account_queue.leavewhenempty AS leavewhenempty,
           account_queue.weight AS weight,
           concat('pi_custom_queue_', account_queue.id) AS context
         from account_queue;

         -- asterisk_queuemembers
         select m.id AS uniqueid,
           m.account_id AS account_id,
           a.accountcode AS membername,
           m.queue_id AS queue_name,
           m.interface AS interface,
        +  concat('SIP/', a.accountcode) AS state_interface,
           m.penalty AS penalty,
           m.paused AS paused
         from account_queuemember m
         join account_account a on a.id = m.account_id
         where m.in_queue <> 0;

--- a/apps/app_queue.c
+++ b/apps/app_queue.c
@@ -2582,7 +2582,9 @@ static void update_status(struct call_qu
 		 * information. If they are currently in a call then the leg to the agent will be
 		 * considered done and the call finished.
 		 */
-		if (status == AST_DEVICE_NOT_INUSE) {
+		if (status == AST_DEVICE_NOT_INUSE || status == AST_DEVICE_UNKNOWN) {
+			/* We also update the UNKNOWN devices, so the state is
+			 * now set properly at xfer hangup. */
 			update_queue(q, m, m->callcompletedinsl, m->starttime);
 		}
 
@@ -4475,7 +4477,8 @@ static void hangupcalls(struct queue_ent
 			 * dialed we explicitly remove them from the pending members
 			 * container so that subsequent call attempts occur.
 			 */
-			if (outgoing->member->status == AST_DEVICE_NOT_INUSE) {
+			if (outgoing->member->status == AST_DEVICE_NOT_INUSE ||
+					outgoing->member->status == AST_DEVICE_UNKNOWN) {
 				pending_members_remove(outgoing->member);
 			}
 
@@ -8984,7 +8987,7 @@ static int queue_function_mem_read(struc
 			mem_iter = ao2_iterator_init(q->members, 0);
 			while ((m = ao2_iterator_next(&mem_iter))) {
 				/* Count the agents who are logged in and presently answering calls */
-				if ((m->status == AST_DEVICE_NOT_INUSE) && (!m->paused)) {
+				if ((m->status == AST_DEVICE_NOT_INUSE || m->status == AST_DEVICE_UNKNOWN) && (!m->paused)) {
 					count++;
 				}
 				ao2_ref(m, -1);
@@ -8996,7 +8999,7 @@ static int queue_function_mem_read(struc
 			mem_iter = ao2_iterator_init(q->members, 0);
 			while ((m = ao2_iterator_next(&mem_iter))) {
 				/* Count the agents who are logged in, not paused and not wrapping up */
-				if ((m->status == AST_DEVICE_NOT_INUSE) && (!m->paused) &&
+				if ((m->status == AST_DEVICE_NOT_INUSE || m->status == AST_DEVICE_UNKNOWN) && (!m->paused) &&
 						!(m->lastcall && get_wrapuptime(q, m) && ((now - get_wrapuptime(q, m)) < m->lastcall))) {
 					count++;
 				}
