This package uses git-buildpackage (with pristine-tar, without a patch
queue).

Documentation of gbp, git build package, is
at http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.html

You find that doc also in /usr/share/doc/git-buildpackage/manual-html/gbp.html
after installing the package  git-buildpackage

== Tests ==
Tests should be run with autopkgtest. If you have a local setup. As it
needs to run an indeppendent instance of Asterisk, which may need to use
its own ports, a schroot instance will not do.

After a build use something along the lines of:

  autopkgtest asterisk_13.13.1~dfsg-1_amd64.changes -- virt-server [whatever]

If you want to run the tests manually: this should work. It requires
installing the packages (including asterisk-tests) you built on the
system, and from the same system, running

  ./debian/tests/asttestmods

Note that it needs to be run as root.

== pjproject repacking ==
Upstream only supports building against their local copy of pjproject (later
installed as libasteriskpj), which is downloaded, patched and built during
the build process. Builds in Debian may not download anything during the
build, in addition parts of the pjproject source archive may not be DFSG free.

The Debian package includes a dfsg-repacked upstream tarball in debian/,
which is generated with the command

mk-origtargz --package pjproject --version 2.8 \
	--copyright-file copyright.pjproject \
	--compression bzip2 \
	--repack-suffix '~dfsg' \
	pjproject-2.8.tar.bz2

It uses a local copy of the debian/copyright file of src:pjproject as input
for deleted files. In the buildprocess the .tar.bz2 is copied into place
and the checksum regenerated.

When a new upstream Asterisk version switches to a new pjproject version you
need to
 - update the tarball according to the above description
 - update the PJVER variable in debian/rules
 - update the filename in debian/source/include-binaries

